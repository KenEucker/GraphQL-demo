type Author {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  comments: [Comment!]
  posts: [Post]
}

type Comment {
  id: ID!
  text: String!
  author: Author!
  post: Post!
}
 
type Post {
  id: ID!
  title: String!
  author: Author!
  comments: [Comment!]
}
 
type Query {
  author(id: ID!): Author
  authors(query: String): [Author]
  comment(id: ID!): Comment
  comments(author: String, text: String): [Comment]
  post(id: ID!): Post
  posts(query: String): [Post]
}

type Mutation {
  createAuthor(author: CreateAuthorInput!): Author!
  createComment(comment: CreateCommentInput!): Comment!
  createPost(post: CreatePostInput!): Post!

  deleteAuthor(authorId: String!): Author!
  deleteComment(commentId: String!): Comment!
  deletePost(postId: String!): Post!
  
  updateAuthor(id: String!, data: UpdateAuthorInput!): Author!
  updateComment(id: String!, data: UpdateCommentInput!): Comment!
  updatePost(id: String!, data: UpdatePostInput!): Post!

  publishPost(postId: String!): Post!
}

type Subscription {
  countdown(from: Int): Int!
  comment(postId: String!): Comment
}

input CreateAuthorInput {
  firstName: String!
  lastName: String!
  email: String!
}
input CreateCommentInput {
  authorId: String!
  postId: String!
  text: String!
}
input CreatePostInput {
  authorId: String!
  title: String!
  body: String
}

input UpdateAuthorInput {
  firstName: String
  lastName: String
  email: String
}
input UpdateCommentInput {
  authorId: String
  postId: String
  text: String
}
input UpdatePostInput {
  authorId: String
  title: String
  body: String
}

schema {
  query: Query
}