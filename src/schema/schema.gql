enum Permissions {
  READ
  WRITE
  LOGIN
  INTERACT
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
  PUBLISHED
  UNPUBLISHED
}

enum InteractionType {
  like
  love
  repost
  share
}

type Author {
  id: Int!
  handle: String!
  verified: Boolean
  posts: [Post!]
  permissions: [Permissions!]
  interactions: [Interaction!]
  email: String!
  name: String!
  avatar: String!
  banner: String
  status: String
  bio: String
  link: String
  location: String
  birthday: String
}

type Interaction {
  id: Int!
  author: Author!
  post: Post!
  text: String
  like: Boolean
  love: Boolean
  repost: Boolean
  share: Boolean
}

type Post {
  id: Int!
  author: Author!
  published: Boolean
  interactions: [Interaction!]
  title: String!
  text: String
  status: String
  media: [String]
  tags: [String]
}

type Query {
  author(where: AuthorByInput, id: Int): Author
  authors(where: AuthorByInput): [Author]
  interaction(where: InteractionByInput, id: Int): Interaction
  interactions(where: InteractionByInput): [Interaction]
  post(where: PostByInput, id: Int): Post
  posts(where: PostByInput): [Post]

  getNumberOfInteractionsForPost(from: GetNumberInteractionsForPostInput): GetNumberOfInteractionsForPostPayload
}

type Mutation {
  createAuthor(author: CreateAuthorInput!): Author!
  createInteraction(interaction: CreateInteractionInput!): Interaction!
  createPost(post: CreatePostInput!): Post!

  deleteAuthor(authorId: Int, where: AuthorByInput): Author!
  deleteInteraction(interactionId: Int, where: InteractionByInput): Interaction!
  deletePost(postId: Int, where: PostByInput): Post!

  updateAuthor(data: UpdateAuthorInput!, id: Int): Author!
  updateInteraction(data: UpdateInteractionInput!, id: Int): Interaction!
  updatePost(id: Int!, data: UpdatePostInput!): Post!

  publishPost(id: Int!): Post!
  unPublishPost(id: Int!): Post!

  verifyAuthor(id: Int!): Author!
  unVerifyAuthor(id: Int!): Author!
}

type Subscription {
  countdown(from: Int): Int!
  author(where: AuthorByInput): AuthorSubscriptionPayload
  interaction(where: InteractionByInput): InteractionSubscriptionPayload
  post(where: PostByInput): PostSubscriptionPayload
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  data: Author
}

type InteractionSubscriptionPayload {
  mutation: MutationType!
  data: Interaction
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post
}

type GetNumberOfInteractionsForPostPayload {
  like: Int
  love: Int
  repost: Int
  share: Int
}

input AuthorByInput {
  email: String
  handle: String
  id: Int
}

input InteractionByInput {
  author: AuthorInput
  post: PostInput
}

input PostByInput {
  id: Int
  author: AuthorInput
  title: String
}

input AuthorInput {
  id: Int
  handle: String
  email: String
}

input InteractionInput {
  id: Int
  post: PostInput
  author: AuthorInput
}

input PostInput {
  id: Int
  title: String
  author: AuthorInput
}

input CreateAuthorInput {
  name: String!
  handle: String!
  email: String!
  avatar: String
  banner: String
}
input CreateInteractionInput {
  authorId: Int!
  postId: Int!
  text: String
  like: Boolean
  love: Boolean
  repost: Boolean
  share: Boolean
}
input CreatePostInput {
  authorId: Int!
  title: String!
  text: String
  published: Boolean
  status: String
  media: [String!]
}

input UpdateAuthorInput {
  email: String
  name: String
  avatar: String
  banner: String
  status: String
  bio: String
  link: String
  location: String
  birthday: String
}
input UpdateInteractionInput {
  authorId: Int!
  postId: Int!
  text: String
  like: Boolean
  love: Boolean
  repost: Boolean
  share: Boolean
}
input UpdatePostInput {
  authorId: Int!
  postId: Int!
  title: String
  text: String
  status: String
  media: [String!]
}
input GetNumberInteractionsForPostInput {
  id: Int!
  like: Boolean
  love: Boolean
  share: Boolean
  repost: Boolean
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
