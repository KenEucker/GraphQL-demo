enum Permissions {
  READ
  WRITE
  LOGIN
  INTERACT
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
  PUBLISHED
  UNPUBLISHED
}

type Author {
  id: ID!
  handle: String!
  verified: Boolean
  posts: [Post!]
  permissions: [Permissions!]
  interactions: [Interaction!]
  email: String!
  name: String!
  avatar: String!
  banner: String
  status: String
  bio: String
  link: String
  location: String
  birthday: String
}

type Interaction {
  id: ID!
  author: Author!
  post: Post!
  text: String
  share: Boolean
  like: Boolean
}

type Post {
  id: ID!
  author: Author!
  published: Boolean
  interactions: [Interaction!]
  title: String!
  text: String
  status: String
  media: [String]
  tags: [String]
}

type Query {
  author(id: ID!): Author
  authors(by: AuthorByInput): [Author]
  interaction(id: ID!): Interaction
  interactions(by: InteractionByInput): [Interaction]
  post(id: ID!): Post
  posts(by: PostByInput): [Post]
}

type Mutation {
  createAuthor(author: CreateAuthorInput!): Author!
  createInteraction(interaction: CreateInteractionInput!): Interaction!
  createPost(post: CreatePostInput!): Post!

  deleteAuthor(authorId: String!): Author!
  deleteInteraction(interactionId: String!): Interaction!
  deletePost(postId: String!): Post!

  updateAuthor(id: String!, data: UpdateAuthorInput!): Author!
  updateInteraction(id: String!, data: UpdateInteractionInput!): Interaction!
  updatePost(id: String!, data: UpdatePostInput!): Post!

  publishPost(id: String!): Post!
  unPublishPost(id: String!): Post!

  verifyAuthor(id: String!): Author!
}

type Subscription {
  countdown(from: Int): Int!
  author(by: AuthorByInput): AuthorSubscriptionPayload
  interaction(by: InteractionByInput): InteractionSubscriptionPayload
  post(by: PostByInput): PostSubscriptionPayload
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  data: Author
}

type InteractionSubscriptionPayload {
  mutation: MutationType!
  data: Interaction
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post
}

input AuthorByInput {
  email: String
  handle: String
  id: String
}

input InteractionByInput {
  author: String
  post: String
}

input PostByInput {
  author: String
  title: String
}

input CreateAuthorInput {
  name: String!
  handle: String!
  email: String!
  avatar: String
  banner: String
}
input CreateInteractionInput {
  authorId: String!
  postId: String!
  text: String
  like: Boolean
  share: Boolean
}
input CreatePostInput {
  authorId: String!
  title: String!
  text: String
  published: Boolean
  status: String
  media: [String!]
}

input UpdateAuthorInput {
  name: String
  email: String
  avatar: String
  banner: String
}
input UpdateInteractionInput {
  authorId: String
  postId: String
  text: String
  like: Boolean
  share: Boolean
}
input UpdatePostInput {
  title: String
  text: String
  status: String
  media: [String!]
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
